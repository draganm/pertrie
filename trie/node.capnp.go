// Code generated by capnpc-go. DO NOT EDIT.

package trie

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type Node capnp.Struct
type Node_value Node
type Node_value_Which uint16

const (
	Node_value_Which_nil      Node_value_Which = 0
	Node_value_Which_content  Node_value_Which = 1
	Node_value_Which_blockRef Node_value_Which = 2
)

func (w Node_value_Which) String() string {
	const s = "nilcontentblockRef"
	switch w {
	case Node_value_Which_nil:
		return s[0:3]
	case Node_value_Which_content:
		return s[3:10]
	case Node_value_Which_blockRef:
		return s[10:18]

	}
	return "Node_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Node_TypeID is the unique identifier for the type Node.
const Node_TypeID = 0xfb056d00e01e8db3

func NewNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Node(st), err
}

func NewRootNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Node(st), err
}

func ReadRootNode(msg *capnp.Message) (Node, error) {
	root, err := msg.Root()
	return Node(root.Struct()), err
}

func (s Node) String() string {
	str, _ := text.Marshal(0xfb056d00e01e8db3, capnp.Struct(s))
	return str
}

func (s Node) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Node) DecodeFromPtr(p capnp.Ptr) Node {
	return Node(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Node) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Node) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node) Prefix() (Node_Prefix, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Node_Prefix(p.Struct()), err
}

func (s Node) HasPrefix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Node) SetPrefix(v Node_Prefix) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPrefix sets the prefix field to a newly
// allocated Node_Prefix struct, preferring placement in s's segment.
func (s Node) NewPrefix() (Node_Prefix, error) {
	ss, err := NewNode_Prefix(capnp.Struct(s).Segment())
	if err != nil {
		return Node_Prefix{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Node) Value() Node_value { return Node_value(s) }

func (s Node_value) Which() Node_value_Which {
	return Node_value_Which(capnp.Struct(s).Uint16(0))
}
func (s Node_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_value) SetNil() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Node_value) Content() (TrieRootOrValue, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != content")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return TrieRootOrValue(p.Struct()), err
}

func (s Node_value) HasContent() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Node_value) SetContent(v TrieRootOrValue) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated TrieRootOrValue struct, preferring placement in s's segment.
func (s Node_value) NewContent() (TrieRootOrValue, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewTrieRootOrValue(capnp.Struct(s).Segment())
	if err != nil {
		return TrieRootOrValue{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Node_value) BlockRef() uint32 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != blockRef")
	}
	return capnp.Struct(s).Uint32(4)
}

func (s Node_value) SetBlockRef(v uint32) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint32(4, v)
}

func (s Node) Children() (Node_Child_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Node_Child_List(p.List()), err
}

func (s Node) HasChildren() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Node) SetChildren(v Node_Child_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Node_Child_List, preferring placement in s's segment.
func (s Node) NewChildren(n int32) (Node_Child_List, error) {
	l, err := NewNode_Child_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Node_Child_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Node_List is a list of Node.
type Node_List = capnp.StructList[Node]

// NewNode creates a new list of Node.
func NewNode_List(s *capnp.Segment, sz int32) (Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Node](l), err
}

// Node_Future is a wrapper for a Node promised by a client call.
type Node_Future struct{ *capnp.Future }

func (f Node_Future) Struct() (Node, error) {
	p, err := f.Future.Ptr()
	return Node(p.Struct()), err
}
func (p Node_Future) Prefix() Node_Prefix_Future {
	return Node_Prefix_Future{Future: p.Future.Field(0, nil)}
}
func (p Node_Future) Value() Node_value_Future { return Node_value_Future{p.Future} }

// Node_value_Future is a wrapper for a Node_value promised by a client call.
type Node_value_Future struct{ *capnp.Future }

func (f Node_value_Future) Struct() (Node_value, error) {
	p, err := f.Future.Ptr()
	return Node_value(p.Struct()), err
}
func (p Node_value_Future) Content() TrieRootOrValue_Future {
	return TrieRootOrValue_Future{Future: p.Future.Field(1, nil)}
}

type Node_Prefix capnp.Struct

// Node_Prefix_TypeID is the unique identifier for the type Node_Prefix.
const Node_Prefix_TypeID = 0xe3bea96dc24798ba

func NewNode_Prefix(s *capnp.Segment) (Node_Prefix, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node_Prefix(st), err
}

func NewRootNode_Prefix(s *capnp.Segment) (Node_Prefix, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node_Prefix(st), err
}

func ReadRootNode_Prefix(msg *capnp.Message) (Node_Prefix, error) {
	root, err := msg.Root()
	return Node_Prefix(root.Struct()), err
}

func (s Node_Prefix) String() string {
	str, _ := text.Marshal(0xe3bea96dc24798ba, capnp.Struct(s))
	return str
}

func (s Node_Prefix) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Node_Prefix) DecodeFromPtr(p capnp.Ptr) Node_Prefix {
	return Node_Prefix(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Node_Prefix) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Node_Prefix) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_Prefix) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_Prefix) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_Prefix) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Node_Prefix) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Node_Prefix) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Node_Prefix) LastByteIsHalfByte() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Node_Prefix) SetLastByteIsHalfByte(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Node_Prefix_List is a list of Node_Prefix.
type Node_Prefix_List = capnp.StructList[Node_Prefix]

// NewNode_Prefix creates a new list of Node_Prefix.
func NewNode_Prefix_List(s *capnp.Segment, sz int32) (Node_Prefix_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Node_Prefix](l), err
}

// Node_Prefix_Future is a wrapper for a Node_Prefix promised by a client call.
type Node_Prefix_Future struct{ *capnp.Future }

func (f Node_Prefix_Future) Struct() (Node_Prefix, error) {
	p, err := f.Future.Ptr()
	return Node_Prefix(p.Struct()), err
}

type Node_Child capnp.Struct
type Node_Child_value Node_Child
type Node_Child_value_Which uint16

const (
	Node_Child_value_Which_nil      Node_Child_value_Which = 0
	Node_Child_value_Which_embedded Node_Child_value_Which = 1
	Node_Child_value_Which_blockRef Node_Child_value_Which = 2
)

func (w Node_Child_value_Which) String() string {
	const s = "nilembeddedblockRef"
	switch w {
	case Node_Child_value_Which_nil:
		return s[0:3]
	case Node_Child_value_Which_embedded:
		return s[3:11]
	case Node_Child_value_Which_blockRef:
		return s[11:19]

	}
	return "Node_Child_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Node_Child_TypeID is the unique identifier for the type Node_Child.
const Node_Child_TypeID = 0x98f2f343ba55d3f9

func NewNode_Child(s *capnp.Segment) (Node_Child, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node_Child(st), err
}

func NewRootNode_Child(s *capnp.Segment) (Node_Child, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node_Child(st), err
}

func ReadRootNode_Child(msg *capnp.Message) (Node_Child, error) {
	root, err := msg.Root()
	return Node_Child(root.Struct()), err
}

func (s Node_Child) String() string {
	str, _ := text.Marshal(0x98f2f343ba55d3f9, capnp.Struct(s))
	return str
}

func (s Node_Child) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Node_Child) DecodeFromPtr(p capnp.Ptr) Node_Child {
	return Node_Child(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Node_Child) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Node_Child) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_Child) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_Child) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_Child) Value() Node_Child_value { return Node_Child_value(s) }

func (s Node_Child_value) Which() Node_Child_value_Which {
	return Node_Child_value_Which(capnp.Struct(s).Uint16(0))
}
func (s Node_Child_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_Child_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_Child_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_Child_value) SetNil() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Node_Child_value) Embedded() (Node, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != embedded")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Node(p.Struct()), err
}

func (s Node_Child_value) HasEmbedded() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Node_Child_value) SetEmbedded(v Node) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEmbedded sets the embedded field to a newly
// allocated Node struct, preferring placement in s's segment.
func (s Node_Child_value) NewEmbedded() (Node, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return Node{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Node_Child_value) BlockRef() uint32 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != blockRef")
	}
	return capnp.Struct(s).Uint32(4)
}

func (s Node_Child_value) SetBlockRef(v uint32) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint32(4, v)
}

// Node_Child_List is a list of Node_Child.
type Node_Child_List = capnp.StructList[Node_Child]

// NewNode_Child creates a new list of Node_Child.
func NewNode_Child_List(s *capnp.Segment, sz int32) (Node_Child_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Node_Child](l), err
}

// Node_Child_Future is a wrapper for a Node_Child promised by a client call.
type Node_Child_Future struct{ *capnp.Future }

func (f Node_Child_Future) Struct() (Node_Child, error) {
	p, err := f.Future.Ptr()
	return Node_Child(p.Struct()), err
}
func (p Node_Child_Future) Value() Node_Child_value_Future { return Node_Child_value_Future{p.Future} }

// Node_Child_value_Future is a wrapper for a Node_Child_value promised by a client call.
type Node_Child_value_Future struct{ *capnp.Future }

func (f Node_Child_value_Future) Struct() (Node_Child_value, error) {
	p, err := f.Future.Ptr()
	return Node_Child_value(p.Struct()), err
}
func (p Node_Child_value_Future) Embedded() Node_Future {
	return Node_Future{Future: p.Future.Field(0, nil)}
}

type TrieRoot capnp.Struct

// TrieRoot_TypeID is the unique identifier for the type TrieRoot.
const TrieRoot_TypeID = 0xf748d66808f07b38

func NewTrieRoot(s *capnp.Segment) (TrieRoot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TrieRoot(st), err
}

func NewRootTrieRoot(s *capnp.Segment) (TrieRoot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TrieRoot(st), err
}

func ReadRootTrieRoot(msg *capnp.Message) (TrieRoot, error) {
	root, err := msg.Root()
	return TrieRoot(root.Struct()), err
}

func (s TrieRoot) String() string {
	str, _ := text.Marshal(0xf748d66808f07b38, capnp.Struct(s))
	return str
}

func (s TrieRoot) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrieRoot) DecodeFromPtr(p capnp.Ptr) TrieRoot {
	return TrieRoot(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrieRoot) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrieRoot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRoot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRoot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRoot) Count() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s TrieRoot) SetCount(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s TrieRoot) Seq() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s TrieRoot) SetSeq(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s TrieRoot) Node() (Node, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Node(p.Struct()), err
}

func (s TrieRoot) HasNode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRoot) SetNode(v Node) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNode sets the node field to a newly
// allocated Node struct, preferring placement in s's segment.
func (s TrieRoot) NewNode() (Node, error) {
	ss, err := NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return Node{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TrieRoot_List is a list of TrieRoot.
type TrieRoot_List = capnp.StructList[TrieRoot]

// NewTrieRoot creates a new list of TrieRoot.
func NewTrieRoot_List(s *capnp.Segment, sz int32) (TrieRoot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[TrieRoot](l), err
}

// TrieRoot_Future is a wrapper for a TrieRoot promised by a client call.
type TrieRoot_Future struct{ *capnp.Future }

func (f TrieRoot_Future) Struct() (TrieRoot, error) {
	p, err := f.Future.Ptr()
	return TrieRoot(p.Struct()), err
}
func (p TrieRoot_Future) Node() Node_Future {
	return Node_Future{Future: p.Future.Field(0, nil)}
}

type ValueSegment capnp.Struct

// ValueSegment_TypeID is the unique identifier for the type ValueSegment.
const ValueSegment_TypeID = 0x996c4f7c8ac1947e

func NewValueSegment(s *capnp.Segment) (ValueSegment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ValueSegment(st), err
}

func NewRootValueSegment(s *capnp.Segment) (ValueSegment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ValueSegment(st), err
}

func ReadRootValueSegment(msg *capnp.Message) (ValueSegment, error) {
	root, err := msg.Root()
	return ValueSegment(root.Struct()), err
}

func (s ValueSegment) String() string {
	str, _ := text.Marshal(0x996c4f7c8ac1947e, capnp.Struct(s))
	return str
}

func (s ValueSegment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ValueSegment) DecodeFromPtr(p capnp.Ptr) ValueSegment {
	return ValueSegment(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ValueSegment) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ValueSegment) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ValueSegment) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ValueSegment) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ValueSegment) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ValueSegment) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ValueSegment) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s ValueSegment) NextSegment() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s ValueSegment) SetNextSegment(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// ValueSegment_List is a list of ValueSegment.
type ValueSegment_List = capnp.StructList[ValueSegment]

// NewValueSegment creates a new list of ValueSegment.
func NewValueSegment_List(s *capnp.Segment, sz int32) (ValueSegment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ValueSegment](l), err
}

// ValueSegment_Future is a wrapper for a ValueSegment promised by a client call.
type ValueSegment_Future struct{ *capnp.Future }

func (f ValueSegment_Future) Struct() (ValueSegment, error) {
	p, err := f.Future.Ptr()
	return ValueSegment(p.Struct()), err
}

type Value capnp.Struct

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0x9a48fece217f86c2

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value(st), err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value(st), err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.Root()
	return Value(root.Struct()), err
}

func (s Value) String() string {
	str, _ := text.Marshal(0x9a48fece217f86c2, capnp.Struct(s))
	return str
}

func (s Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value) DecodeFromPtr(p capnp.Ptr) Value {
	return Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value) Size() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Value) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Value) FirstSegment() (ValueSegment, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ValueSegment(p.Struct()), err
}

func (s Value) HasFirstSegment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetFirstSegment(v ValueSegment) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFirstSegment sets the firstSegment field to a newly
// allocated ValueSegment struct, preferring placement in s's segment.
func (s Value) NewFirstSegment() (ValueSegment, error) {
	ss, err := NewValueSegment(capnp.Struct(s).Segment())
	if err != nil {
		return ValueSegment{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Value_List is a list of Value.
type Value_List = capnp.StructList[Value]

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Value](l), err
}

// Value_Future is a wrapper for a Value promised by a client call.
type Value_Future struct{ *capnp.Future }

func (f Value_Future) Struct() (Value, error) {
	p, err := f.Future.Ptr()
	return Value(p.Struct()), err
}
func (p Value_Future) FirstSegment() ValueSegment_Future {
	return ValueSegment_Future{Future: p.Future.Field(0, nil)}
}

type TrieRootOrValue capnp.Struct
type TrieRootOrValue_value TrieRootOrValue
type TrieRootOrValue_value_Which uint16

const (
	TrieRootOrValue_value_Which_trieRoot TrieRootOrValue_value_Which = 0
	TrieRootOrValue_value_Which_value    TrieRootOrValue_value_Which = 1
)

func (w TrieRootOrValue_value_Which) String() string {
	const s = "trieRootvalue"
	switch w {
	case TrieRootOrValue_value_Which_trieRoot:
		return s[0:8]
	case TrieRootOrValue_value_Which_value:
		return s[8:13]

	}
	return "TrieRootOrValue_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TrieRootOrValue_TypeID is the unique identifier for the type TrieRootOrValue.
const TrieRootOrValue_TypeID = 0x98ab6abe03983644

func NewTrieRootOrValue(s *capnp.Segment) (TrieRootOrValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TrieRootOrValue(st), err
}

func NewRootTrieRootOrValue(s *capnp.Segment) (TrieRootOrValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TrieRootOrValue(st), err
}

func ReadRootTrieRootOrValue(msg *capnp.Message) (TrieRootOrValue, error) {
	root, err := msg.Root()
	return TrieRootOrValue(root.Struct()), err
}

func (s TrieRootOrValue) String() string {
	str, _ := text.Marshal(0x98ab6abe03983644, capnp.Struct(s))
	return str
}

func (s TrieRootOrValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrieRootOrValue) DecodeFromPtr(p capnp.Ptr) TrieRootOrValue {
	return TrieRootOrValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrieRootOrValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrieRootOrValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRootOrValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRootOrValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRootOrValue) Value() TrieRootOrValue_value { return TrieRootOrValue_value(s) }

func (s TrieRootOrValue_value) Which() TrieRootOrValue_value_Which {
	return TrieRootOrValue_value_Which(capnp.Struct(s).Uint16(0))
}
func (s TrieRootOrValue_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRootOrValue_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRootOrValue_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRootOrValue_value) TrieRoot() (TrieRoot, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != trieRoot")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return TrieRoot(p.Struct()), err
}

func (s TrieRootOrValue_value) HasTrieRoot() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRootOrValue_value) SetTrieRoot(v TrieRoot) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTrieRoot sets the trieRoot field to a newly
// allocated TrieRoot struct, preferring placement in s's segment.
func (s TrieRootOrValue_value) NewTrieRoot() (TrieRoot, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewTrieRoot(capnp.Struct(s).Segment())
	if err != nil {
		return TrieRoot{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TrieRootOrValue_value) Value() (Value, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != value")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Value(p.Struct()), err
}

func (s TrieRootOrValue_value) HasValue() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRootOrValue_value) SetValue(v Value) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s TrieRootOrValue_value) NewValue() (Value, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return Value{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TrieRootOrValue_List is a list of TrieRootOrValue.
type TrieRootOrValue_List = capnp.StructList[TrieRootOrValue]

// NewTrieRootOrValue creates a new list of TrieRootOrValue.
func NewTrieRootOrValue_List(s *capnp.Segment, sz int32) (TrieRootOrValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TrieRootOrValue](l), err
}

// TrieRootOrValue_Future is a wrapper for a TrieRootOrValue promised by a client call.
type TrieRootOrValue_Future struct{ *capnp.Future }

func (f TrieRootOrValue_Future) Struct() (TrieRootOrValue, error) {
	p, err := f.Future.Ptr()
	return TrieRootOrValue(p.Struct()), err
}
func (p TrieRootOrValue_Future) Value() TrieRootOrValue_value_Future {
	return TrieRootOrValue_value_Future{p.Future}
}

// TrieRootOrValue_value_Future is a wrapper for a TrieRootOrValue_value promised by a client call.
type TrieRootOrValue_value_Future struct{ *capnp.Future }

func (f TrieRootOrValue_value_Future) Struct() (TrieRootOrValue_value, error) {
	p, err := f.Future.Ptr()
	return TrieRootOrValue_value(p.Struct()), err
}
func (p TrieRootOrValue_value_Future) TrieRoot() TrieRoot_Future {
	return TrieRoot_Future{Future: p.Future.Field(0, nil)}
}
func (p TrieRootOrValue_value_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(0, nil)}
}

const schema_a21abfe7a0a832e0 = "x\xda\x8c\x94A\x88\x1bU\x18\xc7\xbf\xff{3MV" +
	"7n\x86YDZ\xebb\x11\xb5\xc5]v\xa3\xe86" +
	"([\xb7]\x9b\x94\xad\xcd\xabMQ\xb0\x87\xd9\xe4\xc5" +
	"\xa6Nfb2Y[\x15\x17<x(z\xf3\x90\xf6" +
	"$=)\x1e\x16\xd6\xdb\x1eZ\\O=T(R\xa5" +
	"\x85B\xd1\x83\x07AW=\x88\x88\x19y3\x99\xcc\x18" +
	"s\xd8\x9c\x1e/\xdf\xfb\xfe\xff\xf7\xfb\xfe\xf3fw\xb3" +
	"C\xda\\\xe6{\x8d\x98\x98\xd7w\xf9G\x9e\xed\xf2\xab" +
	"\xe7\xbe\xe8\x92\xb8\x1f\xf0\xef\xe5>\xfb\xf4\xa7k\xbb\xaf" +
	"\x90\x8e\x14\x91)\xd8\x1d\xf3\x0cS\xab\xd7\xd8\x02\xc1\xff" +
	"\xeb\xdb\xf2\xe6\xe1?~\xef\x92\xc8\x02\xbf~\xf9\xf1#" +
	"\xf7\x1a\xfa\xdfa\xe9\x19\xb6a\xca\xa0\xd4\x0aJ\xdf\xff" +
	"\xe4\xab\x8b\xef\x9d\xb0/\x8d\xec+\xd9\x96\xd9\x08\x8a\xeb" +
	"\xecm\x82\xbf\xf5\xe1\xda\xa3\xdf\xf4\x0a\x97G\x16_g" +
	"\x17\xcd\x9bA\xf1\x8d\xa0\x18\x0f]\xdb\xbe\xf4\xd2\xf5\x0d" +
	"\x12\x0f\"a\xa9\x8c\x148\x919\xcd\x7f \x98s|" +
	"\x9d\xe0ov\x8fn5>\xbf\xfa\xe3\x08\xbf7\xf9\xa6" +
	"y\x9b\xab\xd5-\xae\xba\x1e]+\x7f}\xe7\xe1\xda/" +
	"\xff)-\xf3\xb0\xe7Am\x83`\x1e\xd4T\xcf\x8f~" +
	"\xee\xed\xb9\xf1\xdc\xe3\xdb$\xf6\x001>%\xcf\x88\x9e" +
	"\xbe\xa5\xdd\x07\x82yWSM\xe7\xdf\xddN\x9f\xfd\xae" +
	"\xf0\xa7\xba\x17\x1b\xbe\xd7\x0b\xfa\x15sIW\xab\x17\xf5" +
	"u\x1ah\x0e!\x08,\xde\xd6?0\xef\xeaO\x10\x99" +
	"\xbf\xe9\xeb4\xed;nU\xceT\xac&s\x9a\xf9S" +
	"\xad\xba<\xe9\xba\xde\x89\xd6i\xcb\xe6\x1dY\x02\x84\xc6" +
	"5\"$\xbc\x1a\x99\x1c\xb1\xa9U\xcb\xee\xc8\xc1a8" +
	"\xcd\xfc\xcbj=u\xf8l\xdd\xae&\xcf\x0d\x10\x8f:" +
	"\xa7DO\xab\x9dW\xe4\x1b\x0d\xe9x\xa4N\xa6\xd5I" +
	"\x0dD\xc6\xfe\x03D\xe21\x0e1\xcb\x00LB\xedM" +
	"\xaf\x10\x89\xa78\xc4<\xc3D\xd5\xf2,d\x88!C" +
	"\xf0\x1dy\xdeS}(%\x1d\x0fibH\xab\xdd\x84" +
	"\xc5@\x8av\"r.!\xd2\xae\xbf#1F\x0cc" +
	"\x04\xbfVo\xb5\x95\x0aM(\xbf\xc8\xc6\xe1$ \x9b" +
	"\xd0c\x11\x92\x80\xc8\xcc\xaa\x95\xb2;R\x8csm\xdc" +
	"\xf7\x03\xdd\xa5}D\xe2\x10\x87Xf\xc8\xa0\xe7\x87\xca" +
	"\xc5cD\xa2\xc0!N1\xece\xff\xf8\x98TQ0" +
	"\x84\xda.q\x88\xd7\x19RN\xdd\xa6]\xbel\xac\xc8" +
	"jUV\x89\x08\xd9h\xe2}\x13+\xb6[y\xf3\xa4" +
	"\xac\xa9\xffF\x81\x08\x8c-\x94Z\xb2V?\xbf\x03\x1a" +
	"\x97\x89\xc4,\x87x~\x18\xb9m\xb5\xbd\xc5\x0b\x9eD" +
	"\xb1]\xb0\xec\xda\xe2\x05\xeeI\x80\x180J0\x1c~" +
	"\x9fA\xd8:\x09a/z\xd1u\x8b\x8bD\xe2\x08\x87" +
	"(\x0d(p\"\xe3\xb8\xa2\xb0\xcc!^\x8d(\xacU" +
	"\\\xc7\x0b\x071\xf8|v\xc0\x80\x0f\x87\xbd#gV" +
	"\xc3p(\x16\xd1\x88\xf6+\xbd'9\xc43\xc9\x11\xcd" +
	"\xe5\xe2p\xf8^\xbfK0\x85\xf8#\x0d=\x84\x17F" +
	"6~\x94\x86B\x82\xc8G\xcau=5\x88\xf1\xc1 " +
	"\x96r1\x19#\x9aDq_\xcc\x05,du\xfc@" +
	"\x9c\x98\xa9\x8a\xdbq\xbc(\xac\xa9\xb6|+ZO(" +
	"\xc9\xff\xe5dxD$\xd2H<u\xc6X>~\x14" +
	"\x0d=\xd7OL\xf8\x91'\xbd\xe6c\xaf\xea\x17\xbf\x80" +
	"F1G\xcc`l\x12\x9a\"w\xac\x1f\xa4e\x86\x85" +
	"f\xd0\x0b\xd9X.\x09\xcd\xaf(\x8d\x96t\x14\xd8\x07" +
	"\x08%\x0edc3\x04\xb5\xf9o\x00\x00\x00\xff\xff\x84" +
	"\x92\xbby"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a21abfe7a0a832e0,
		Nodes: []uint64{
			0x98ab6abe03983644,
			0x98f2f343ba55d3f9,
			0x996c4f7c8ac1947e,
			0x9a48fece217f86c2,
			0xb2c94699f0bf1801,
			0xe3bea96dc24798ba,
			0xee661cdac3557f47,
			0xf02637cd1bfeeb8c,
			0xf748d66808f07b38,
			0xfb056d00e01e8db3,
		},
		Compressed: true,
	})
}
