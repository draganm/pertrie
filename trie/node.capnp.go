// Code generated by capnpc-go. DO NOT EDIT.

package trie

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type Node capnp.Struct
type Node_value Node
type Node_value_Which uint16

const (
	Node_value_Which_nil      Node_value_Which = 0
	Node_value_Which_content  Node_value_Which = 1
	Node_value_Which_blockRef Node_value_Which = 2
)

func (w Node_value_Which) String() string {
	const s = "nilcontentblockRef"
	switch w {
	case Node_value_Which_nil:
		return s[0:3]
	case Node_value_Which_content:
		return s[3:10]
	case Node_value_Which_blockRef:
		return s[10:18]

	}
	return "Node_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Node_TypeID is the unique identifier for the type Node.
const Node_TypeID = 0xfb056d00e01e8db3

func NewNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Node(st), err
}

func NewRootNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Node(st), err
}

func ReadRootNode(msg *capnp.Message) (Node, error) {
	root, err := msg.Root()
	return Node(root.Struct()), err
}

func (s Node) String() string {
	str, _ := text.Marshal(0xfb056d00e01e8db3, capnp.Struct(s))
	return str
}

func (s Node) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Node) DecodeFromPtr(p capnp.Ptr) Node {
	return Node(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Node) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Node) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node) Prefix() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Node) HasPrefix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Node) SetPrefix(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Node) Value() Node_value { return Node_value(s) }

func (s Node_value) Which() Node_value_Which {
	return Node_value_Which(capnp.Struct(s).Uint16(0))
}
func (s Node_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_value) SetNil() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Node_value) Content() (TrieRootOrValue, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != content")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return TrieRootOrValue(p.Struct()), err
}

func (s Node_value) HasContent() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Node_value) SetContent(v TrieRootOrValue) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated TrieRootOrValue struct, preferring placement in s's segment.
func (s Node_value) NewContent() (TrieRootOrValue, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewTrieRootOrValue(capnp.Struct(s).Segment())
	if err != nil {
		return TrieRootOrValue{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Node_value) BlockRef() uint32 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != blockRef")
	}
	return capnp.Struct(s).Uint32(4)
}

func (s Node_value) SetBlockRef(v uint32) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint32(4, v)
}

func (s Node) Children() (Node_Child_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Node_Child_List(p.List()), err
}

func (s Node) HasChildren() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Node) SetChildren(v Node_Child_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Node_Child_List, preferring placement in s's segment.
func (s Node) NewChildren(n int32) (Node_Child_List, error) {
	l, err := NewNode_Child_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Node_Child_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Node_List is a list of Node.
type Node_List = capnp.StructList[Node]

// NewNode creates a new list of Node.
func NewNode_List(s *capnp.Segment, sz int32) (Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Node](l), err
}

// Node_Future is a wrapper for a Node promised by a client call.
type Node_Future struct{ *capnp.Future }

func (f Node_Future) Struct() (Node, error) {
	p, err := f.Future.Ptr()
	return Node(p.Struct()), err
}
func (p Node_Future) Value() Node_value_Future { return Node_value_Future{p.Future} }

// Node_value_Future is a wrapper for a Node_value promised by a client call.
type Node_value_Future struct{ *capnp.Future }

func (f Node_value_Future) Struct() (Node_value, error) {
	p, err := f.Future.Ptr()
	return Node_value(p.Struct()), err
}
func (p Node_value_Future) Content() TrieRootOrValue_Future {
	return TrieRootOrValue_Future{Future: p.Future.Field(1, nil)}
}

type Node_Child capnp.Struct
type Node_Child_value Node_Child
type Node_Child_value_Which uint16

const (
	Node_Child_value_Which_nil      Node_Child_value_Which = 0
	Node_Child_value_Which_embedded Node_Child_value_Which = 1
	Node_Child_value_Which_blockRef Node_Child_value_Which = 2
)

func (w Node_Child_value_Which) String() string {
	const s = "nilembeddedblockRef"
	switch w {
	case Node_Child_value_Which_nil:
		return s[0:3]
	case Node_Child_value_Which_embedded:
		return s[3:11]
	case Node_Child_value_Which_blockRef:
		return s[11:19]

	}
	return "Node_Child_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Node_Child_TypeID is the unique identifier for the type Node_Child.
const Node_Child_TypeID = 0x98f2f343ba55d3f9

func NewNode_Child(s *capnp.Segment) (Node_Child, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node_Child(st), err
}

func NewRootNode_Child(s *capnp.Segment) (Node_Child, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node_Child(st), err
}

func ReadRootNode_Child(msg *capnp.Message) (Node_Child, error) {
	root, err := msg.Root()
	return Node_Child(root.Struct()), err
}

func (s Node_Child) String() string {
	str, _ := text.Marshal(0x98f2f343ba55d3f9, capnp.Struct(s))
	return str
}

func (s Node_Child) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Node_Child) DecodeFromPtr(p capnp.Ptr) Node_Child {
	return Node_Child(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Node_Child) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Node_Child) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_Child) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_Child) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_Child) Value() Node_Child_value { return Node_Child_value(s) }

func (s Node_Child_value) Which() Node_Child_value_Which {
	return Node_Child_value_Which(capnp.Struct(s).Uint16(0))
}
func (s Node_Child_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_Child_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_Child_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_Child_value) SetNil() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Node_Child_value) Embedded() (Node, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != embedded")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Node(p.Struct()), err
}

func (s Node_Child_value) HasEmbedded() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Node_Child_value) SetEmbedded(v Node) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEmbedded sets the embedded field to a newly
// allocated Node struct, preferring placement in s's segment.
func (s Node_Child_value) NewEmbedded() (Node, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return Node{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Node_Child_value) BlockRef() uint32 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != blockRef")
	}
	return capnp.Struct(s).Uint32(4)
}

func (s Node_Child_value) SetBlockRef(v uint32) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint32(4, v)
}

// Node_Child_List is a list of Node_Child.
type Node_Child_List = capnp.StructList[Node_Child]

// NewNode_Child creates a new list of Node_Child.
func NewNode_Child_List(s *capnp.Segment, sz int32) (Node_Child_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Node_Child](l), err
}

// Node_Child_Future is a wrapper for a Node_Child promised by a client call.
type Node_Child_Future struct{ *capnp.Future }

func (f Node_Child_Future) Struct() (Node_Child, error) {
	p, err := f.Future.Ptr()
	return Node_Child(p.Struct()), err
}
func (p Node_Child_Future) Value() Node_Child_value_Future { return Node_Child_value_Future{p.Future} }

// Node_Child_value_Future is a wrapper for a Node_Child_value promised by a client call.
type Node_Child_value_Future struct{ *capnp.Future }

func (f Node_Child_value_Future) Struct() (Node_Child_value, error) {
	p, err := f.Future.Ptr()
	return Node_Child_value(p.Struct()), err
}
func (p Node_Child_value_Future) Embedded() Node_Future {
	return Node_Future{Future: p.Future.Field(0, nil)}
}

type TrieRoot capnp.Struct

// TrieRoot_TypeID is the unique identifier for the type TrieRoot.
const TrieRoot_TypeID = 0xf748d66808f07b38

func NewTrieRoot(s *capnp.Segment) (TrieRoot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TrieRoot(st), err
}

func NewRootTrieRoot(s *capnp.Segment) (TrieRoot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TrieRoot(st), err
}

func ReadRootTrieRoot(msg *capnp.Message) (TrieRoot, error) {
	root, err := msg.Root()
	return TrieRoot(root.Struct()), err
}

func (s TrieRoot) String() string {
	str, _ := text.Marshal(0xf748d66808f07b38, capnp.Struct(s))
	return str
}

func (s TrieRoot) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrieRoot) DecodeFromPtr(p capnp.Ptr) TrieRoot {
	return TrieRoot(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrieRoot) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrieRoot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRoot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRoot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRoot) Count() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s TrieRoot) SetCount(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s TrieRoot) Seq() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s TrieRoot) SetSeq(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s TrieRoot) Node() (Node, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Node(p.Struct()), err
}

func (s TrieRoot) HasNode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRoot) SetNode(v Node) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNode sets the node field to a newly
// allocated Node struct, preferring placement in s's segment.
func (s TrieRoot) NewNode() (Node, error) {
	ss, err := NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return Node{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TrieRoot_List is a list of TrieRoot.
type TrieRoot_List = capnp.StructList[TrieRoot]

// NewTrieRoot creates a new list of TrieRoot.
func NewTrieRoot_List(s *capnp.Segment, sz int32) (TrieRoot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[TrieRoot](l), err
}

// TrieRoot_Future is a wrapper for a TrieRoot promised by a client call.
type TrieRoot_Future struct{ *capnp.Future }

func (f TrieRoot_Future) Struct() (TrieRoot, error) {
	p, err := f.Future.Ptr()
	return TrieRoot(p.Struct()), err
}
func (p TrieRoot_Future) Node() Node_Future {
	return Node_Future{Future: p.Future.Field(0, nil)}
}

type ValueSegment capnp.Struct

// ValueSegment_TypeID is the unique identifier for the type ValueSegment.
const ValueSegment_TypeID = 0x996c4f7c8ac1947e

func NewValueSegment(s *capnp.Segment) (ValueSegment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ValueSegment(st), err
}

func NewRootValueSegment(s *capnp.Segment) (ValueSegment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ValueSegment(st), err
}

func ReadRootValueSegment(msg *capnp.Message) (ValueSegment, error) {
	root, err := msg.Root()
	return ValueSegment(root.Struct()), err
}

func (s ValueSegment) String() string {
	str, _ := text.Marshal(0x996c4f7c8ac1947e, capnp.Struct(s))
	return str
}

func (s ValueSegment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ValueSegment) DecodeFromPtr(p capnp.Ptr) ValueSegment {
	return ValueSegment(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ValueSegment) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ValueSegment) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ValueSegment) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ValueSegment) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ValueSegment) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ValueSegment) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ValueSegment) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s ValueSegment) NextSegment() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s ValueSegment) SetNextSegment(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// ValueSegment_List is a list of ValueSegment.
type ValueSegment_List = capnp.StructList[ValueSegment]

// NewValueSegment creates a new list of ValueSegment.
func NewValueSegment_List(s *capnp.Segment, sz int32) (ValueSegment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ValueSegment](l), err
}

// ValueSegment_Future is a wrapper for a ValueSegment promised by a client call.
type ValueSegment_Future struct{ *capnp.Future }

func (f ValueSegment_Future) Struct() (ValueSegment, error) {
	p, err := f.Future.Ptr()
	return ValueSegment(p.Struct()), err
}

type Value capnp.Struct

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0x9a48fece217f86c2

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value(st), err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value(st), err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.Root()
	return Value(root.Struct()), err
}

func (s Value) String() string {
	str, _ := text.Marshal(0x9a48fece217f86c2, capnp.Struct(s))
	return str
}

func (s Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value) DecodeFromPtr(p capnp.Ptr) Value {
	return Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value) Size() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Value) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Value) FirstSegment() (ValueSegment, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ValueSegment(p.Struct()), err
}

func (s Value) HasFirstSegment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetFirstSegment(v ValueSegment) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFirstSegment sets the firstSegment field to a newly
// allocated ValueSegment struct, preferring placement in s's segment.
func (s Value) NewFirstSegment() (ValueSegment, error) {
	ss, err := NewValueSegment(capnp.Struct(s).Segment())
	if err != nil {
		return ValueSegment{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Value_List is a list of Value.
type Value_List = capnp.StructList[Value]

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Value](l), err
}

// Value_Future is a wrapper for a Value promised by a client call.
type Value_Future struct{ *capnp.Future }

func (f Value_Future) Struct() (Value, error) {
	p, err := f.Future.Ptr()
	return Value(p.Struct()), err
}
func (p Value_Future) FirstSegment() ValueSegment_Future {
	return ValueSegment_Future{Future: p.Future.Field(0, nil)}
}

type TrieRootOrValue capnp.Struct
type TrieRootOrValue_value TrieRootOrValue
type TrieRootOrValue_value_Which uint16

const (
	TrieRootOrValue_value_Which_trieRoot TrieRootOrValue_value_Which = 0
	TrieRootOrValue_value_Which_value    TrieRootOrValue_value_Which = 1
)

func (w TrieRootOrValue_value_Which) String() string {
	const s = "trieRootvalue"
	switch w {
	case TrieRootOrValue_value_Which_trieRoot:
		return s[0:8]
	case TrieRootOrValue_value_Which_value:
		return s[8:13]

	}
	return "TrieRootOrValue_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TrieRootOrValue_TypeID is the unique identifier for the type TrieRootOrValue.
const TrieRootOrValue_TypeID = 0x98ab6abe03983644

func NewTrieRootOrValue(s *capnp.Segment) (TrieRootOrValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TrieRootOrValue(st), err
}

func NewRootTrieRootOrValue(s *capnp.Segment) (TrieRootOrValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TrieRootOrValue(st), err
}

func ReadRootTrieRootOrValue(msg *capnp.Message) (TrieRootOrValue, error) {
	root, err := msg.Root()
	return TrieRootOrValue(root.Struct()), err
}

func (s TrieRootOrValue) String() string {
	str, _ := text.Marshal(0x98ab6abe03983644, capnp.Struct(s))
	return str
}

func (s TrieRootOrValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrieRootOrValue) DecodeFromPtr(p capnp.Ptr) TrieRootOrValue {
	return TrieRootOrValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrieRootOrValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrieRootOrValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRootOrValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRootOrValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRootOrValue) Value() TrieRootOrValue_value { return TrieRootOrValue_value(s) }

func (s TrieRootOrValue_value) Which() TrieRootOrValue_value_Which {
	return TrieRootOrValue_value_Which(capnp.Struct(s).Uint16(0))
}
func (s TrieRootOrValue_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRootOrValue_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRootOrValue_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRootOrValue_value) TrieRoot() (TrieRoot, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != trieRoot")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return TrieRoot(p.Struct()), err
}

func (s TrieRootOrValue_value) HasTrieRoot() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRootOrValue_value) SetTrieRoot(v TrieRoot) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTrieRoot sets the trieRoot field to a newly
// allocated TrieRoot struct, preferring placement in s's segment.
func (s TrieRootOrValue_value) NewTrieRoot() (TrieRoot, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewTrieRoot(capnp.Struct(s).Segment())
	if err != nil {
		return TrieRoot{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TrieRootOrValue_value) Value() (Value, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != value")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Value(p.Struct()), err
}

func (s TrieRootOrValue_value) HasValue() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRootOrValue_value) SetValue(v Value) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s TrieRootOrValue_value) NewValue() (Value, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return Value{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TrieRootOrValue_List is a list of TrieRootOrValue.
type TrieRootOrValue_List = capnp.StructList[TrieRootOrValue]

// NewTrieRootOrValue creates a new list of TrieRootOrValue.
func NewTrieRootOrValue_List(s *capnp.Segment, sz int32) (TrieRootOrValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TrieRootOrValue](l), err
}

// TrieRootOrValue_Future is a wrapper for a TrieRootOrValue promised by a client call.
type TrieRootOrValue_Future struct{ *capnp.Future }

func (f TrieRootOrValue_Future) Struct() (TrieRootOrValue, error) {
	p, err := f.Future.Ptr()
	return TrieRootOrValue(p.Struct()), err
}
func (p TrieRootOrValue_Future) Value() TrieRootOrValue_value_Future {
	return TrieRootOrValue_value_Future{p.Future}
}

// TrieRootOrValue_value_Future is a wrapper for a TrieRootOrValue_value promised by a client call.
type TrieRootOrValue_value_Future struct{ *capnp.Future }

func (f TrieRootOrValue_value_Future) Struct() (TrieRootOrValue_value, error) {
	p, err := f.Future.Ptr()
	return TrieRootOrValue_value(p.Struct()), err
}
func (p TrieRootOrValue_value_Future) TrieRoot() TrieRoot_Future {
	return TrieRoot_Future{Future: p.Future.Field(0, nil)}
}
func (p TrieRootOrValue_value_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(0, nil)}
}

type FreeBlock capnp.Struct

// FreeBlock_TypeID is the unique identifier for the type FreeBlock.
const FreeBlock_TypeID = 0x80d72bb581ca14aa

func NewFreeBlock(s *capnp.Segment) (FreeBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FreeBlock(st), err
}

func NewRootFreeBlock(s *capnp.Segment) (FreeBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FreeBlock(st), err
}

func ReadRootFreeBlock(msg *capnp.Message) (FreeBlock, error) {
	root, err := msg.Root()
	return FreeBlock(root.Struct()), err
}

func (s FreeBlock) String() string {
	str, _ := text.Marshal(0x80d72bb581ca14aa, capnp.Struct(s))
	return str
}

func (s FreeBlock) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FreeBlock) DecodeFromPtr(p capnp.Ptr) FreeBlock {
	return FreeBlock(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FreeBlock) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FreeBlock) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FreeBlock) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FreeBlock) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FreeBlock) Next() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s FreeBlock) SetNext(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// FreeBlock_List is a list of FreeBlock.
type FreeBlock_List = capnp.StructList[FreeBlock]

// NewFreeBlock creates a new list of FreeBlock.
func NewFreeBlock_List(s *capnp.Segment, sz int32) (FreeBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[FreeBlock](l), err
}

// FreeBlock_Future is a wrapper for a FreeBlock promised by a client call.
type FreeBlock_Future struct{ *capnp.Future }

func (f FreeBlock_Future) Struct() (FreeBlock, error) {
	p, err := f.Future.Ptr()
	return FreeBlock(p.Struct()), err
}

type Database capnp.Struct

// Database_TypeID is the unique identifier for the type Database.
const Database_TypeID = 0x9a555bb3a53cb4f2

func NewDatabase(s *capnp.Segment) (Database, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Database(st), err
}

func NewRootDatabase(s *capnp.Segment) (Database, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Database(st), err
}

func ReadRootDatabase(msg *capnp.Message) (Database, error) {
	root, err := msg.Root()
	return Database(root.Struct()), err
}

func (s Database) String() string {
	str, _ := text.Marshal(0x9a555bb3a53cb4f2, capnp.Struct(s))
	return str
}

func (s Database) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Database) DecodeFromPtr(p capnp.Ptr) Database {
	return Database(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Database) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Database) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Database) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Database) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Database) FirstFreeBlock() (FreeBlock, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return FreeBlock(p.Struct()), err
}

func (s Database) HasFirstFreeBlock() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Database) SetFirstFreeBlock(v FreeBlock) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFirstFreeBlock sets the firstFreeBlock field to a newly
// allocated FreeBlock struct, preferring placement in s's segment.
func (s Database) NewFirstFreeBlock() (FreeBlock, error) {
	ss, err := NewFreeBlock(capnp.Struct(s).Segment())
	if err != nil {
		return FreeBlock{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Database) NextUnallocatedBlock() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Database) SetNextUnallocatedBlock(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Database) Root() (TrieRootOrValue, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return TrieRootOrValue(p.Struct()), err
}

func (s Database) HasRoot() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Database) SetRoot(v TrieRootOrValue) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewRoot sets the root field to a newly
// allocated TrieRootOrValue struct, preferring placement in s's segment.
func (s Database) NewRoot() (TrieRootOrValue, error) {
	ss, err := NewTrieRootOrValue(capnp.Struct(s).Segment())
	if err != nil {
		return TrieRootOrValue{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Database_List is a list of Database.
type Database_List = capnp.StructList[Database]

// NewDatabase creates a new list of Database.
func NewDatabase_List(s *capnp.Segment, sz int32) (Database_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Database](l), err
}

// Database_Future is a wrapper for a Database promised by a client call.
type Database_Future struct{ *capnp.Future }

func (f Database_Future) Struct() (Database, error) {
	p, err := f.Future.Ptr()
	return Database(p.Struct()), err
}
func (p Database_Future) FirstFreeBlock() FreeBlock_Future {
	return FreeBlock_Future{Future: p.Future.Field(0, nil)}
}
func (p Database_Future) Root() TrieRootOrValue_Future {
	return TrieRootOrValue_Future{Future: p.Future.Field(1, nil)}
}

const schema_a21abfe7a0a832e0 = "x\xda\x8cT]h\x1cU\x14>\xe7\xde\x99\x9d\xadv" +
	"\xdd\x1df\xf1\xaf\xc6\xd0\xa2b\xaa\x8d\xe9*ZB!" +
	"%\x8d1)\xad\xcd\xad\xd9\xa2\xe8\x83\x93\xdd\x1b\xbbu" +
	"v&\xce\xce\xc6\xa5Zc\x84\xfaP\xf4\xcd\x87\xd4'" +
	"\x0d\x08\x1a)\xc1\xd4<(h\xb1>E\xa8 \xa2B" +
	"\x9f\x8a/>\x08\x1a\xea\x83\x88\xb8#gfgg2" +
	"Y\xc4}\xba\xcc~\xf7|\xdf\xf9\xcew\xcf\xd08;" +
	"\xa4\xec\xcf=\xa4\x02\x13\x07\xd5\x8c\xbfR\xfcfq\xfd" +
	"\x81\x9f^\x07q3\xa2\x7f\xbd\xf4\xe1{\xbf\\\xbes" +
	"\x19\x14\x0d\xc08\xcbV\x8cs\x8cN\x8bl\x04\xd0\x1f" +
	"{t\x89\x7fy\xfa\xe3\xa5\x14VE\x82\xbc\xcf\xae\x19" +
	"\x17\x03\xf0G\x01\xf8\xaf\xef\xcb\x9f\x1f\xfe\xe3\xc6\x12\x88" +
	"\x02\xe2\xef\x97\xde\xbe\xfbz]\xfd;\x84^dk\xc6" +
	"z\x00\xfd$\x80\xbe\xf6\xceW\xe7_=n]\xe8Y" +
	"w\x9d]1\xbe\x08\xc0\x9f\xb1\x97\x01\xfd+o.\xec" +
	"\xfe\xb6=\xf1nO\xf0\x1d\xfc\xbc\xb1\x9b\xd3\xa9\x8f\x13" +
	"\xf8\xc6\xa7\x07?\xb8\xf4ly\x1b8\xa8w\x96/\x1b" +
	"\xe7\x02\xf0\"_\x05\xf4\xf1\xf6\xcb\x9b\x17\xc67\xd6@" +
	"\xdc\x8a\x09\xfde\xd4\x90\x03\x18\xf7*?\x03\x1a\x03\x0a" +
	"A\x9fX(\x7f}\xed\xae\xd9\xdf\xb64W\xe6!p" +
	"CY\x0346\x02\xe0[\xbf\xb6w]}\xec\xbeM" +
	"\x10\xbb0a \xd5d\x00\x0fK\xf5&\x044\xea*" +
	"\x89=\xf0\xcaf\xf6\xd4\x8f\x13\x7f\x92X\x96\xee\xec\xaa" +
	"\xbal\xfc\xa0\xd2\xe9;u\x15\xba\x9c\xa9\xbe\x82nj" +
	"\x997\x8cz\xe66\x00\xa3\x99Y\x85}\xbe\xedT\xe5" +
	"`\xc5\x9cC{nx\xdc\x95r4o9\x95\x17\xa7" +
	"\x10\x85\xc2\x15\x00\x05\x01\xf4\xdc^\x00\x91\xe5(\x8a\x0c" +
	"\xf3\xb6ly\x98\x05\x86Y\xc0\xeemf\xcf\x0dO\xbb" +
	"5y\xc2q\xbc\xe3\xeeI\xd3\xe2M\xd9\xad\x81\x89N" +
	"\xf5\\\x09X\xff\xbci5\xe5\x16\xea'\xe9\xdc\x7f\xf8" +
	"T\xcd\xaa&\xefu]\xefu\x8fHO\xd2\x97\xa7\xe4" +
	"\x0bui{@7\xb3]\xd5\x03\xa4\xfa\x1e\x8eb\x88" +
	"!b\x11\xe9\xdb\xbe\x19\x00\xf1 Gq\x80a\xbej" +
	"z&\xe6\x80a\x8e:\x91-\x8f\xea\x80&\xed\xed\xfd" +
	"aD\x05\xff\x87\xe4t\x82\xa4Q;#q\x070\xdc" +
	"\x01\xe8\xcf\xd6\xdc\x06\xb1@\x9e\xf4b!\x0e7 \x16" +
	"R|c\xa6g\xcehf#0rg\x97\xf1\xf13" +
	"\x00b\x8c\xa3\x98\x8a\x19\x8f\xad\x00\x88)\x8e\xe29\x86" +
	":\xc3\"\xc5G\x7f\x86\xa4Ms\x14\xcf\xb3\x0e\xf3\xb8" +
	"+aD\x8e\xd2\x80\xb1\x10?\xee\x88[\xb6\xbc\xb2m" +
	"Zh9\x15\xd3\x93\xd50\x09\x91\x15y\xd7qHq" +
	"7\xa5)\xc5,\x1ab0\xc3\xc1yS\xb3\x9a\x92d" +
	"\xef\xf4\xfdP\xf7\x1e\x00q\x88\xa38\xca0\x87m?" +
	"T>y\x04@Lp\x14\xd3\x0c\xfb\xd8?~G\xbb" +
	"8\x127\xa4\xd95\x0b2\xbe\xac\xcf\xc8jUV\x01" +
	"\x00\x0bQ\xc2;\"fH\xe9\x099K\xff\xf5\x1a]" +
	"\x98\xae =\x1dI!{RS\x1f\xb6#\xf6\xc9\xd1" +
	"\xd8\xe2\x8e(N.\x93\xa8\xa3\x1c\xc5\xd3\x91\xa8\x85\x8a" +
	"c{\xe1$\xd3\xbe\xfc\x97$\x9e~-M98\x1f" +
	"\xa6\x8b\xa2\x1596@|\xf7s\x14\x8f$\x1d\xdb_" +
	"\x8a\xd3\xe5{\x9d*\x81)\xf1\x8e\x085\x84\x0dc!" +
	"\xde\x8a=R\x16\xe8\xd0\x1c\xc7K\xa5\xac\x14;\xa3G" +
	"1\x9b\xdc\x93\x88\x1e\x0b\xbd:\xb67\x1e`\x7f\xc5i" +
	"\xda^\x94v\xad!_\x8a\xcey\xa2\xdc6\xb6\xf4\x88" +
	"@(\xc9\xdd\xaac)\xdc\x08I]\xc3\xb1.\xfa\xc5" +
	"\xcbV\x9f,\x01\xd3\x19+\xa2B.\x91wC!n" +
	"d\xce\x95\xb3\xb5V\xf4\xd4;[\xa4B\x95]i\x93" +
	"u\xb7\x00Nq\xc4B\xcc\x0dH\x1f\xff\x0d\x00\x00\xff" +
	"\xff+I\xdb\x10"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a21abfe7a0a832e0,
		Nodes: []uint64{
			0x80d72bb581ca14aa,
			0x98ab6abe03983644,
			0x98f2f343ba55d3f9,
			0x996c4f7c8ac1947e,
			0x9a48fece217f86c2,
			0x9a555bb3a53cb4f2,
			0xb2c94699f0bf1801,
			0xee661cdac3557f47,
			0xf02637cd1bfeeb8c,
			0xf748d66808f07b38,
			0xfb056d00e01e8db3,
		},
		Compressed: true,
	})
}
