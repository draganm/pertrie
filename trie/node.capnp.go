// Code generated by capnpc-go. DO NOT EDIT.

package trie

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type Node capnp.Struct
type Node_value Node
type Node_value_Which uint16

const (
	Node_value_Which_nil      Node_value_Which = 0
	Node_value_Which_content  Node_value_Which = 1
	Node_value_Which_blockRef Node_value_Which = 2
)

func (w Node_value_Which) String() string {
	const s = "nilcontentblockRef"
	switch w {
	case Node_value_Which_nil:
		return s[0:3]
	case Node_value_Which_content:
		return s[3:10]
	case Node_value_Which_blockRef:
		return s[10:18]

	}
	return "Node_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Node_TypeID is the unique identifier for the type Node.
const Node_TypeID = 0xfb056d00e01e8db3

func NewNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Node(st), err
}

func NewRootNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Node(st), err
}

func ReadRootNode(msg *capnp.Message) (Node, error) {
	root, err := msg.Root()
	return Node(root.Struct()), err
}

func (s Node) String() string {
	str, _ := text.Marshal(0xfb056d00e01e8db3, capnp.Struct(s))
	return str
}

func (s Node) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Node) DecodeFromPtr(p capnp.Ptr) Node {
	return Node(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Node) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Node) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node) Prefix() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Node) HasPrefix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Node) SetPrefix(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Node) Value() Node_value { return Node_value(s) }

func (s Node_value) Which() Node_value_Which {
	return Node_value_Which(capnp.Struct(s).Uint16(0))
}
func (s Node_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_value) SetNil() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Node_value) Content() (TrieRootOrValue, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != content")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return TrieRootOrValue(p.Struct()), err
}

func (s Node_value) HasContent() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Node_value) SetContent(v TrieRootOrValue) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated TrieRootOrValue struct, preferring placement in s's segment.
func (s Node_value) NewContent() (TrieRootOrValue, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewTrieRootOrValue(capnp.Struct(s).Segment())
	if err != nil {
		return TrieRootOrValue{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Node_value) BlockRef() uint32 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != blockRef")
	}
	return capnp.Struct(s).Uint32(4)
}

func (s Node_value) SetBlockRef(v uint32) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint32(4, v)
}

func (s Node) Children() (Node_Child_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Node_Child_List(p.List()), err
}

func (s Node) HasChildren() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Node) SetChildren(v Node_Child_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Node_Child_List, preferring placement in s's segment.
func (s Node) NewChildren(n int32) (Node_Child_List, error) {
	l, err := NewNode_Child_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Node_Child_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Node_List is a list of Node.
type Node_List = capnp.StructList[Node]

// NewNode creates a new list of Node.
func NewNode_List(s *capnp.Segment, sz int32) (Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Node](l), err
}

// Node_Future is a wrapper for a Node promised by a client call.
type Node_Future struct{ *capnp.Future }

func (f Node_Future) Struct() (Node, error) {
	p, err := f.Future.Ptr()
	return Node(p.Struct()), err
}
func (p Node_Future) Value() Node_value_Future { return Node_value_Future{p.Future} }

// Node_value_Future is a wrapper for a Node_value promised by a client call.
type Node_value_Future struct{ *capnp.Future }

func (f Node_value_Future) Struct() (Node_value, error) {
	p, err := f.Future.Ptr()
	return Node_value(p.Struct()), err
}
func (p Node_value_Future) Content() TrieRootOrValue_Future {
	return TrieRootOrValue_Future{Future: p.Future.Field(1, nil)}
}

type Node_Child capnp.Struct
type Node_Child_value Node_Child
type Node_Child_value_Which uint16

const (
	Node_Child_value_Which_nil      Node_Child_value_Which = 0
	Node_Child_value_Which_embedded Node_Child_value_Which = 1
	Node_Child_value_Which_blockRef Node_Child_value_Which = 2
)

func (w Node_Child_value_Which) String() string {
	const s = "nilembeddedblockRef"
	switch w {
	case Node_Child_value_Which_nil:
		return s[0:3]
	case Node_Child_value_Which_embedded:
		return s[3:11]
	case Node_Child_value_Which_blockRef:
		return s[11:19]

	}
	return "Node_Child_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Node_Child_TypeID is the unique identifier for the type Node_Child.
const Node_Child_TypeID = 0x98f2f343ba55d3f9

func NewNode_Child(s *capnp.Segment) (Node_Child, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node_Child(st), err
}

func NewRootNode_Child(s *capnp.Segment) (Node_Child, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node_Child(st), err
}

func ReadRootNode_Child(msg *capnp.Message) (Node_Child, error) {
	root, err := msg.Root()
	return Node_Child(root.Struct()), err
}

func (s Node_Child) String() string {
	str, _ := text.Marshal(0x98f2f343ba55d3f9, capnp.Struct(s))
	return str
}

func (s Node_Child) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Node_Child) DecodeFromPtr(p capnp.Ptr) Node_Child {
	return Node_Child(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Node_Child) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Node_Child) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_Child) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_Child) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_Child) Value() Node_Child_value { return Node_Child_value(s) }

func (s Node_Child_value) Which() Node_Child_value_Which {
	return Node_Child_value_Which(capnp.Struct(s).Uint16(0))
}
func (s Node_Child_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_Child_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_Child_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_Child_value) SetNil() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Node_Child_value) Embedded() (Node, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != embedded")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Node(p.Struct()), err
}

func (s Node_Child_value) HasEmbedded() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Node_Child_value) SetEmbedded(v Node) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEmbedded sets the embedded field to a newly
// allocated Node struct, preferring placement in s's segment.
func (s Node_Child_value) NewEmbedded() (Node, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return Node{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Node_Child_value) BlockRef() uint32 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != blockRef")
	}
	return capnp.Struct(s).Uint32(4)
}

func (s Node_Child_value) SetBlockRef(v uint32) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint32(4, v)
}

// Node_Child_List is a list of Node_Child.
type Node_Child_List = capnp.StructList[Node_Child]

// NewNode_Child creates a new list of Node_Child.
func NewNode_Child_List(s *capnp.Segment, sz int32) (Node_Child_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Node_Child](l), err
}

// Node_Child_Future is a wrapper for a Node_Child promised by a client call.
type Node_Child_Future struct{ *capnp.Future }

func (f Node_Child_Future) Struct() (Node_Child, error) {
	p, err := f.Future.Ptr()
	return Node_Child(p.Struct()), err
}
func (p Node_Child_Future) Value() Node_Child_value_Future { return Node_Child_value_Future{p.Future} }

// Node_Child_value_Future is a wrapper for a Node_Child_value promised by a client call.
type Node_Child_value_Future struct{ *capnp.Future }

func (f Node_Child_value_Future) Struct() (Node_Child_value, error) {
	p, err := f.Future.Ptr()
	return Node_Child_value(p.Struct()), err
}
func (p Node_Child_value_Future) Embedded() Node_Future {
	return Node_Future{Future: p.Future.Field(0, nil)}
}

type TrieRoot capnp.Struct

// TrieRoot_TypeID is the unique identifier for the type TrieRoot.
const TrieRoot_TypeID = 0xf748d66808f07b38

func NewTrieRoot(s *capnp.Segment) (TrieRoot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TrieRoot(st), err
}

func NewRootTrieRoot(s *capnp.Segment) (TrieRoot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TrieRoot(st), err
}

func ReadRootTrieRoot(msg *capnp.Message) (TrieRoot, error) {
	root, err := msg.Root()
	return TrieRoot(root.Struct()), err
}

func (s TrieRoot) String() string {
	str, _ := text.Marshal(0xf748d66808f07b38, capnp.Struct(s))
	return str
}

func (s TrieRoot) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrieRoot) DecodeFromPtr(p capnp.Ptr) TrieRoot {
	return TrieRoot(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrieRoot) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrieRoot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRoot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRoot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRoot) Count() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s TrieRoot) SetCount(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s TrieRoot) Seq() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s TrieRoot) SetSeq(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s TrieRoot) Node() (Node, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Node(p.Struct()), err
}

func (s TrieRoot) HasNode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRoot) SetNode(v Node) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNode sets the node field to a newly
// allocated Node struct, preferring placement in s's segment.
func (s TrieRoot) NewNode() (Node, error) {
	ss, err := NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return Node{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TrieRoot_List is a list of TrieRoot.
type TrieRoot_List = capnp.StructList[TrieRoot]

// NewTrieRoot creates a new list of TrieRoot.
func NewTrieRoot_List(s *capnp.Segment, sz int32) (TrieRoot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[TrieRoot](l), err
}

// TrieRoot_Future is a wrapper for a TrieRoot promised by a client call.
type TrieRoot_Future struct{ *capnp.Future }

func (f TrieRoot_Future) Struct() (TrieRoot, error) {
	p, err := f.Future.Ptr()
	return TrieRoot(p.Struct()), err
}
func (p TrieRoot_Future) Node() Node_Future {
	return Node_Future{Future: p.Future.Field(0, nil)}
}

type ValueSegment capnp.Struct

// ValueSegment_TypeID is the unique identifier for the type ValueSegment.
const ValueSegment_TypeID = 0x996c4f7c8ac1947e

func NewValueSegment(s *capnp.Segment) (ValueSegment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ValueSegment(st), err
}

func NewRootValueSegment(s *capnp.Segment) (ValueSegment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ValueSegment(st), err
}

func ReadRootValueSegment(msg *capnp.Message) (ValueSegment, error) {
	root, err := msg.Root()
	return ValueSegment(root.Struct()), err
}

func (s ValueSegment) String() string {
	str, _ := text.Marshal(0x996c4f7c8ac1947e, capnp.Struct(s))
	return str
}

func (s ValueSegment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ValueSegment) DecodeFromPtr(p capnp.Ptr) ValueSegment {
	return ValueSegment(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ValueSegment) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ValueSegment) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ValueSegment) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ValueSegment) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ValueSegment) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ValueSegment) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ValueSegment) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s ValueSegment) NextSegment() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s ValueSegment) SetNextSegment(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// ValueSegment_List is a list of ValueSegment.
type ValueSegment_List = capnp.StructList[ValueSegment]

// NewValueSegment creates a new list of ValueSegment.
func NewValueSegment_List(s *capnp.Segment, sz int32) (ValueSegment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ValueSegment](l), err
}

// ValueSegment_Future is a wrapper for a ValueSegment promised by a client call.
type ValueSegment_Future struct{ *capnp.Future }

func (f ValueSegment_Future) Struct() (ValueSegment, error) {
	p, err := f.Future.Ptr()
	return ValueSegment(p.Struct()), err
}

type Value capnp.Struct

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0x9a48fece217f86c2

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value(st), err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value(st), err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.Root()
	return Value(root.Struct()), err
}

func (s Value) String() string {
	str, _ := text.Marshal(0x9a48fece217f86c2, capnp.Struct(s))
	return str
}

func (s Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value) DecodeFromPtr(p capnp.Ptr) Value {
	return Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value) Size() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Value) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Value) FirstSegment() (ValueSegment, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ValueSegment(p.Struct()), err
}

func (s Value) HasFirstSegment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetFirstSegment(v ValueSegment) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFirstSegment sets the firstSegment field to a newly
// allocated ValueSegment struct, preferring placement in s's segment.
func (s Value) NewFirstSegment() (ValueSegment, error) {
	ss, err := NewValueSegment(capnp.Struct(s).Segment())
	if err != nil {
		return ValueSegment{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Value_List is a list of Value.
type Value_List = capnp.StructList[Value]

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Value](l), err
}

// Value_Future is a wrapper for a Value promised by a client call.
type Value_Future struct{ *capnp.Future }

func (f Value_Future) Struct() (Value, error) {
	p, err := f.Future.Ptr()
	return Value(p.Struct()), err
}
func (p Value_Future) FirstSegment() ValueSegment_Future {
	return ValueSegment_Future{Future: p.Future.Field(0, nil)}
}

type TrieRootOrValue capnp.Struct
type TrieRootOrValue_value TrieRootOrValue
type TrieRootOrValue_value_Which uint16

const (
	TrieRootOrValue_value_Which_trieRoot TrieRootOrValue_value_Which = 0
	TrieRootOrValue_value_Which_value    TrieRootOrValue_value_Which = 1
)

func (w TrieRootOrValue_value_Which) String() string {
	const s = "trieRootvalue"
	switch w {
	case TrieRootOrValue_value_Which_trieRoot:
		return s[0:8]
	case TrieRootOrValue_value_Which_value:
		return s[8:13]

	}
	return "TrieRootOrValue_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TrieRootOrValue_TypeID is the unique identifier for the type TrieRootOrValue.
const TrieRootOrValue_TypeID = 0x98ab6abe03983644

func NewTrieRootOrValue(s *capnp.Segment) (TrieRootOrValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TrieRootOrValue(st), err
}

func NewRootTrieRootOrValue(s *capnp.Segment) (TrieRootOrValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TrieRootOrValue(st), err
}

func ReadRootTrieRootOrValue(msg *capnp.Message) (TrieRootOrValue, error) {
	root, err := msg.Root()
	return TrieRootOrValue(root.Struct()), err
}

func (s TrieRootOrValue) String() string {
	str, _ := text.Marshal(0x98ab6abe03983644, capnp.Struct(s))
	return str
}

func (s TrieRootOrValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrieRootOrValue) DecodeFromPtr(p capnp.Ptr) TrieRootOrValue {
	return TrieRootOrValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrieRootOrValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrieRootOrValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRootOrValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRootOrValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRootOrValue) Value() TrieRootOrValue_value { return TrieRootOrValue_value(s) }

func (s TrieRootOrValue_value) Which() TrieRootOrValue_value_Which {
	return TrieRootOrValue_value_Which(capnp.Struct(s).Uint16(0))
}
func (s TrieRootOrValue_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRootOrValue_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRootOrValue_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRootOrValue_value) TrieRoot() (TrieRoot, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != trieRoot")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return TrieRoot(p.Struct()), err
}

func (s TrieRootOrValue_value) HasTrieRoot() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRootOrValue_value) SetTrieRoot(v TrieRoot) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTrieRoot sets the trieRoot field to a newly
// allocated TrieRoot struct, preferring placement in s's segment.
func (s TrieRootOrValue_value) NewTrieRoot() (TrieRoot, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewTrieRoot(capnp.Struct(s).Segment())
	if err != nil {
		return TrieRoot{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TrieRootOrValue_value) Value() (Value, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != value")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Value(p.Struct()), err
}

func (s TrieRootOrValue_value) HasValue() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRootOrValue_value) SetValue(v Value) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s TrieRootOrValue_value) NewValue() (Value, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return Value{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TrieRootOrValue_List is a list of TrieRootOrValue.
type TrieRootOrValue_List = capnp.StructList[TrieRootOrValue]

// NewTrieRootOrValue creates a new list of TrieRootOrValue.
func NewTrieRootOrValue_List(s *capnp.Segment, sz int32) (TrieRootOrValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TrieRootOrValue](l), err
}

// TrieRootOrValue_Future is a wrapper for a TrieRootOrValue promised by a client call.
type TrieRootOrValue_Future struct{ *capnp.Future }

func (f TrieRootOrValue_Future) Struct() (TrieRootOrValue, error) {
	p, err := f.Future.Ptr()
	return TrieRootOrValue(p.Struct()), err
}
func (p TrieRootOrValue_Future) Value() TrieRootOrValue_value_Future {
	return TrieRootOrValue_value_Future{p.Future}
}

// TrieRootOrValue_value_Future is a wrapper for a TrieRootOrValue_value promised by a client call.
type TrieRootOrValue_value_Future struct{ *capnp.Future }

func (f TrieRootOrValue_value_Future) Struct() (TrieRootOrValue_value, error) {
	p, err := f.Future.Ptr()
	return TrieRootOrValue_value(p.Struct()), err
}
func (p TrieRootOrValue_value_Future) TrieRoot() TrieRoot_Future {
	return TrieRoot_Future{Future: p.Future.Field(0, nil)}
}
func (p TrieRootOrValue_value_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(0, nil)}
}

const schema_a21abfe7a0a832e0 = "x\xda\x8cTAL3E\x18\xfd\xde\xcc\xf6oQ*" +
	"\xdd,Q#\"\x91\xa8\x11\"\x84VT 1\x80\x80" +
	"R\x03\xd2AJ<x)\xedT\x8ae\xb7\x96-\x12" +
	"56\xf1\xe0\x81\xe8\xcd\x03\x98\x98(\x09\x89\xc6\x18\"" +
	"\xde<H\xc4\x93\x07\xbd\x98x\xe0D\xbcp0Q\xa2" +
	"\x07c\x8c]3\xbb\xdd\xee\xda\xbf\x07z\x9aL\xdf\xf7" +
	"\xbd\xb7\xef}\xdf\x8c]aFK\xc6\xeb\x1a11\x1e" +
	"\xb9\xe5\xcc?y\xc0\xbf\xd9\xfa\xfc\x80\xc4\x9d\x80s\x99" +
	"\xfa\xf4\xe3\xab\xb3\xfb\x8e(\x82(\x91\xf10\xbb0\x92" +
	"L\x9dF\xd84\xc1\xf9\xfb\xa7\xec\xd7s\x7f\xfeq@" +
	"\"\x01\xfc\xfe\xd5\xfb\x0f\\nG\xfe\xf1\xa0Ivj" +
	"L\xba\xd0'\\\xe8\xdb\x1f|\xbb\xff\xd6J\xf9\xb0c" +
	"\xdfIvn\xcc\xba\xe0\xa7\xd9\xeb\x04\xe7\xfc\xdd\xfa\x83" +
	"?6\x16?\xec\x08\xfe\x88\xed\x1b\xc7.\xf8\x13\x17\x8c" +
	"{\xcf\xae\x0f\x9f\xfd\xfe\x94\xc4\xdd\x08I\xca\"\x0aN" +
	"d\x80\xffB0\"\xfc\x84\xe0<W\xcf~wq\x7f" +
	"\xf1\xb7\xff\xe9\xcdr\x0fx\xccO\x09\xc6\xb1\x0b|\xef" +
	"\xd7F\xdf\x0fO=rM\xa2\x0f\x08<Q=\x19\xd1" +
	"\xe3\xb3\xda\x1d \x18iM\xf1O\xbcy\x1d\xdb\xfcy" +
	"\xf1/%\x96\xb5\x8b\xfdL;2\xbe\xd4\xd4\xe9\x0b\xed" +
	"\x84Z\x9cm\xdf\xc5\x15`!\xf2\x8e\x91\x8e\xdcCd" +
	"\x88\xc8\x09\x8d8\xa6U\x90\xa3\xf9\\\x85\x99\x95\xa9\xb5" +
	"jI\xaeZ\x96\xbdR]\xcf\x95yMf\x00\xa1q" +
	"\x8d\x08!\xadz<El`7W\xae\xc9V1\xcc" +
	"\xca\xd4\x0b\xea<0\xb7Y*\x17\xc2u-\xdf:\xd5" +
	")\xd2uu\xf3\xa2|e[\x9a6\xa9\xca\x98\xaa\xd4" +
	"@\xa4\x0f\x0d\x13\x89\x878\xc4\x18\x03\xd0\x0bu7\xb2" +
	"A$\x1e\xe3\x10\x13\x0c=\x85\x9c\x9dC\x9c\x18\xe2\x04" +
	"\xc7\x94{\xb6\xeaCQi\xda\x88\x11CL\xdd\x86$" +
	"\xbaTt\x13\x92\xad\x10\xc9N\xe9\x0d\x89.b\xe8\"" +
	"8\xc5RuG\xb1P\x8f\xd2\x8bD0q\x04$B" +
	"|\xcc\xb7\xc4udt7\x17-\xd7\xa4\xe8\xe6Z\xb7" +
	"\xe3\xb8\xbc\x0b\x83Db\x86C,1\xc4\xd1p<\xe6" +
	"\xf4\xf3Db\x91C\xac1\xf4\xb3\x7f\x1d\xf4\xaaQ\xd0" +
	"\x85\xba\xcep\x88\x97\x19\xa2f\xa9L\xb7\x1c\xb9\xbd!" +
	"\x0b\x05Y \"$\xfc\xc4\x9b\"6\xcaV\xfe\xd5U" +
	"YT\xffu2\xc2\xcb\xca\xcd\xa2)\xc9c\x0fk\xea" +
	"G\xc3gO?C$\xe69D\xa6%\x8a\x13\xe9\xcb" +
	"J\xd4\x12\x87x\xc9\x17U\xcf[\xa6\xed\xf9\xd2\x9a\xe6" +
	"\x1bH\xe2\xed\xb3W\x93\xa3\xbb^V*(\xdf\xb1!" +
	"\xc5\xf7(\x87\x18\x0f;\x96L\x05Y9v\xb3\x8bk" +
	"J\xb03\x9e\x06\xef\x83\x91\x08\x16\xbf-3\xf8:\xa2" +
	"\x96e\xab)\xe9nM\xc9B*pF\xf7\xc7$=" +
	"\x18\xf8\x02\xe6y\xb5<\x1c\x048\x90\xb7j\xa6\xed\xcf" +
	"NtG\xbe\xe6\x9f{\x14\xe5m\xb1\xb5GDB\x0b" +
	"\xbf5:R\xde~\x85uM\x05\xba\xd4/x|\xf4" +
	"t\x8a\x98\xceX/4\xe5\x92\xf2n\xcc\xc3MW\xaa" +
	"\xb2X\xda\xf3\x17\xa7\xb9\x93y\xd5\xb9*Me\xdd]" +
	"\x84\x0c\x07\x12\x017A]\xfe\x17\x00\x00\xff\xff\xf8\xf2" +
	"\x82\xd0"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a21abfe7a0a832e0,
		Nodes: []uint64{
			0x98ab6abe03983644,
			0x98f2f343ba55d3f9,
			0x996c4f7c8ac1947e,
			0x9a48fece217f86c2,
			0xb2c94699f0bf1801,
			0xee661cdac3557f47,
			0xf02637cd1bfeeb8c,
			0xf748d66808f07b38,
			0xfb056d00e01e8db3,
		},
		Compressed: true,
	})
}
