// Code generated by capnpc-go. DO NOT EDIT.

package trie

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	strconv "strconv"
)

type Node capnp.Struct
type Node_value Node
type Node_value_Which uint16

const (
	Node_value_Which_nil      Node_value_Which = 0
	Node_value_Which_content  Node_value_Which = 1
	Node_value_Which_blockRef Node_value_Which = 2
)

func (w Node_value_Which) String() string {
	const s = "nilcontentblockRef"
	switch w {
	case Node_value_Which_nil:
		return s[0:3]
	case Node_value_Which_content:
		return s[3:10]
	case Node_value_Which_blockRef:
		return s[10:18]

	}
	return "Node_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Node_TypeID is the unique identifier for the type Node.
const Node_TypeID = 0xfb056d00e01e8db3

func NewNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Node(st), err
}

func NewRootNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Node(st), err
}

func ReadRootNode(msg *capnp.Message) (Node, error) {
	root, err := msg.Root()
	return Node(root.Struct()), err
}

func (s Node) String() string {
	str, _ := text.Marshal(0xfb056d00e01e8db3, capnp.Struct(s))
	return str
}

func (s Node) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Node) DecodeFromPtr(p capnp.Ptr) Node {
	return Node(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Node) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Node) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node) Prefix() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Node) HasPrefix() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Node) SetPrefix(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Node) Value() Node_value { return Node_value(s) }

func (s Node_value) Which() Node_value_Which {
	return Node_value_Which(capnp.Struct(s).Uint16(0))
}
func (s Node_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_value) SetNil() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Node_value) Content() (TrieRootOrValue, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != content")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return TrieRootOrValue(p.Struct()), err
}

func (s Node_value) HasContent() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Node_value) SetContent(v TrieRootOrValue) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContent sets the content field to a newly
// allocated TrieRootOrValue struct, preferring placement in s's segment.
func (s Node_value) NewContent() (TrieRootOrValue, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewTrieRootOrValue(capnp.Struct(s).Segment())
	if err != nil {
		return TrieRootOrValue{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Node_value) BlockRef() uint32 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != blockRef")
	}
	return capnp.Struct(s).Uint32(4)
}

func (s Node_value) SetBlockRef(v uint32) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint32(4, v)
}

func (s Node) Children() (Node_Child_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Node_Child_List(p.List()), err
}

func (s Node) HasChildren() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Node) SetChildren(v Node_Child_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Node_Child_List, preferring placement in s's segment.
func (s Node) NewChildren(n int32) (Node_Child_List, error) {
	l, err := NewNode_Child_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Node_Child_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Node_List is a list of Node.
type Node_List = capnp.StructList[Node]

// NewNode creates a new list of Node.
func NewNode_List(s *capnp.Segment, sz int32) (Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Node](l), err
}

// Node_Future is a wrapper for a Node promised by a client call.
type Node_Future struct{ *capnp.Future }

func (f Node_Future) Struct() (Node, error) {
	p, err := f.Future.Ptr()
	return Node(p.Struct()), err
}
func (p Node_Future) Value() Node_value_Future { return Node_value_Future{p.Future} }

// Node_value_Future is a wrapper for a Node_value promised by a client call.
type Node_value_Future struct{ *capnp.Future }

func (f Node_value_Future) Struct() (Node_value, error) {
	p, err := f.Future.Ptr()
	return Node_value(p.Struct()), err
}
func (p Node_value_Future) Content() TrieRootOrValue_Future {
	return TrieRootOrValue_Future{Future: p.Future.Field(1, nil)}
}

type Node_Child capnp.Struct
type Node_Child_value Node_Child
type Node_Child_value_Which uint16

const (
	Node_Child_value_Which_nil      Node_Child_value_Which = 0
	Node_Child_value_Which_embedded Node_Child_value_Which = 1
	Node_Child_value_Which_blockRef Node_Child_value_Which = 2
)

func (w Node_Child_value_Which) String() string {
	const s = "nilembeddedblockRef"
	switch w {
	case Node_Child_value_Which_nil:
		return s[0:3]
	case Node_Child_value_Which_embedded:
		return s[3:11]
	case Node_Child_value_Which_blockRef:
		return s[11:19]

	}
	return "Node_Child_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Node_Child_TypeID is the unique identifier for the type Node_Child.
const Node_Child_TypeID = 0x98f2f343ba55d3f9

func NewNode_Child(s *capnp.Segment) (Node_Child, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node_Child(st), err
}

func NewRootNode_Child(s *capnp.Segment) (Node_Child, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Node_Child(st), err
}

func ReadRootNode_Child(msg *capnp.Message) (Node_Child, error) {
	root, err := msg.Root()
	return Node_Child(root.Struct()), err
}

func (s Node_Child) String() string {
	str, _ := text.Marshal(0x98f2f343ba55d3f9, capnp.Struct(s))
	return str
}

func (s Node_Child) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Node_Child) DecodeFromPtr(p capnp.Ptr) Node_Child {
	return Node_Child(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Node_Child) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Node_Child) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_Child) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_Child) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_Child) Value() Node_Child_value { return Node_Child_value(s) }

func (s Node_Child_value) Which() Node_Child_value_Which {
	return Node_Child_value_Which(capnp.Struct(s).Uint16(0))
}
func (s Node_Child_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Node_Child_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Node_Child_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Node_Child_value) SetNil() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s Node_Child_value) Embedded() (Node, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != embedded")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Node(p.Struct()), err
}

func (s Node_Child_value) HasEmbedded() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Node_Child_value) SetEmbedded(v Node) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEmbedded sets the embedded field to a newly
// allocated Node struct, preferring placement in s's segment.
func (s Node_Child_value) NewEmbedded() (Node, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return Node{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Node_Child_value) BlockRef() uint32 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != blockRef")
	}
	return capnp.Struct(s).Uint32(4)
}

func (s Node_Child_value) SetBlockRef(v uint32) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint32(4, v)
}

// Node_Child_List is a list of Node_Child.
type Node_Child_List = capnp.StructList[Node_Child]

// NewNode_Child creates a new list of Node_Child.
func NewNode_Child_List(s *capnp.Segment, sz int32) (Node_Child_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Node_Child](l), err
}

// Node_Child_Future is a wrapper for a Node_Child promised by a client call.
type Node_Child_Future struct{ *capnp.Future }

func (f Node_Child_Future) Struct() (Node_Child, error) {
	p, err := f.Future.Ptr()
	return Node_Child(p.Struct()), err
}
func (p Node_Child_Future) Value() Node_Child_value_Future { return Node_Child_value_Future{p.Future} }

// Node_Child_value_Future is a wrapper for a Node_Child_value promised by a client call.
type Node_Child_value_Future struct{ *capnp.Future }

func (f Node_Child_value_Future) Struct() (Node_Child_value, error) {
	p, err := f.Future.Ptr()
	return Node_Child_value(p.Struct()), err
}
func (p Node_Child_value_Future) Embedded() Node_Future {
	return Node_Future{Future: p.Future.Field(0, nil)}
}

type TrieRoot capnp.Struct

// TrieRoot_TypeID is the unique identifier for the type TrieRoot.
const TrieRoot_TypeID = 0xf748d66808f07b38

func NewTrieRoot(s *capnp.Segment) (TrieRoot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TrieRoot(st), err
}

func NewRootTrieRoot(s *capnp.Segment) (TrieRoot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return TrieRoot(st), err
}

func ReadRootTrieRoot(msg *capnp.Message) (TrieRoot, error) {
	root, err := msg.Root()
	return TrieRoot(root.Struct()), err
}

func (s TrieRoot) String() string {
	str, _ := text.Marshal(0xf748d66808f07b38, capnp.Struct(s))
	return str
}

func (s TrieRoot) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrieRoot) DecodeFromPtr(p capnp.Ptr) TrieRoot {
	return TrieRoot(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrieRoot) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrieRoot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRoot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRoot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRoot) Count() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s TrieRoot) SetCount(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s TrieRoot) Seq() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s TrieRoot) SetSeq(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s TrieRoot) Node() (Node, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Node(p.Struct()), err
}

func (s TrieRoot) HasNode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRoot) SetNode(v Node) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNode sets the node field to a newly
// allocated Node struct, preferring placement in s's segment.
func (s TrieRoot) NewNode() (Node, error) {
	ss, err := NewNode(capnp.Struct(s).Segment())
	if err != nil {
		return Node{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TrieRoot_List is a list of TrieRoot.
type TrieRoot_List = capnp.StructList[TrieRoot]

// NewTrieRoot creates a new list of TrieRoot.
func NewTrieRoot_List(s *capnp.Segment, sz int32) (TrieRoot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[TrieRoot](l), err
}

// TrieRoot_Future is a wrapper for a TrieRoot promised by a client call.
type TrieRoot_Future struct{ *capnp.Future }

func (f TrieRoot_Future) Struct() (TrieRoot, error) {
	p, err := f.Future.Ptr()
	return TrieRoot(p.Struct()), err
}
func (p TrieRoot_Future) Node() Node_Future {
	return Node_Future{Future: p.Future.Field(0, nil)}
}

type ValueSegment capnp.Struct

// ValueSegment_TypeID is the unique identifier for the type ValueSegment.
const ValueSegment_TypeID = 0x996c4f7c8ac1947e

func NewValueSegment(s *capnp.Segment) (ValueSegment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ValueSegment(st), err
}

func NewRootValueSegment(s *capnp.Segment) (ValueSegment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ValueSegment(st), err
}

func ReadRootValueSegment(msg *capnp.Message) (ValueSegment, error) {
	root, err := msg.Root()
	return ValueSegment(root.Struct()), err
}

func (s ValueSegment) String() string {
	str, _ := text.Marshal(0x996c4f7c8ac1947e, capnp.Struct(s))
	return str
}

func (s ValueSegment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ValueSegment) DecodeFromPtr(p capnp.Ptr) ValueSegment {
	return ValueSegment(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ValueSegment) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ValueSegment) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ValueSegment) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ValueSegment) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ValueSegment) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ValueSegment) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ValueSegment) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s ValueSegment) NextBlock() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s ValueSegment) SetNextBlock(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// ValueSegment_List is a list of ValueSegment.
type ValueSegment_List = capnp.StructList[ValueSegment]

// NewValueSegment creates a new list of ValueSegment.
func NewValueSegment_List(s *capnp.Segment, sz int32) (ValueSegment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ValueSegment](l), err
}

// ValueSegment_Future is a wrapper for a ValueSegment promised by a client call.
type ValueSegment_Future struct{ *capnp.Future }

func (f ValueSegment_Future) Struct() (ValueSegment, error) {
	p, err := f.Future.Ptr()
	return ValueSegment(p.Struct()), err
}

type Value capnp.Struct

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0x9a48fece217f86c2

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value(st), err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value(st), err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.Root()
	return Value(root.Struct()), err
}

func (s Value) String() string {
	str, _ := text.Marshal(0x9a48fece217f86c2, capnp.Struct(s))
	return str
}

func (s Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value) DecodeFromPtr(p capnp.Ptr) Value {
	return Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value) Size() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Value) SetSize(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Value) FirstSegment() (ValueSegment, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ValueSegment(p.Struct()), err
}

func (s Value) HasFirstSegment() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetFirstSegment(v ValueSegment) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFirstSegment sets the firstSegment field to a newly
// allocated ValueSegment struct, preferring placement in s's segment.
func (s Value) NewFirstSegment() (ValueSegment, error) {
	ss, err := NewValueSegment(capnp.Struct(s).Segment())
	if err != nil {
		return ValueSegment{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Value_List is a list of Value.
type Value_List = capnp.StructList[Value]

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Value](l), err
}

// Value_Future is a wrapper for a Value promised by a client call.
type Value_Future struct{ *capnp.Future }

func (f Value_Future) Struct() (Value, error) {
	p, err := f.Future.Ptr()
	return Value(p.Struct()), err
}
func (p Value_Future) FirstSegment() ValueSegment_Future {
	return ValueSegment_Future{Future: p.Future.Field(0, nil)}
}

type TrieRootOrValue capnp.Struct
type TrieRootOrValue_value TrieRootOrValue
type TrieRootOrValue_value_Which uint16

const (
	TrieRootOrValue_value_Which_trieRoot TrieRootOrValue_value_Which = 0
	TrieRootOrValue_value_Which_value    TrieRootOrValue_value_Which = 1
)

func (w TrieRootOrValue_value_Which) String() string {
	const s = "trieRootvalue"
	switch w {
	case TrieRootOrValue_value_Which_trieRoot:
		return s[0:8]
	case TrieRootOrValue_value_Which_value:
		return s[8:13]

	}
	return "TrieRootOrValue_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// TrieRootOrValue_TypeID is the unique identifier for the type TrieRootOrValue.
const TrieRootOrValue_TypeID = 0x98ab6abe03983644

func NewTrieRootOrValue(s *capnp.Segment) (TrieRootOrValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TrieRootOrValue(st), err
}

func NewRootTrieRootOrValue(s *capnp.Segment) (TrieRootOrValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return TrieRootOrValue(st), err
}

func ReadRootTrieRootOrValue(msg *capnp.Message) (TrieRootOrValue, error) {
	root, err := msg.Root()
	return TrieRootOrValue(root.Struct()), err
}

func (s TrieRootOrValue) String() string {
	str, _ := text.Marshal(0x98ab6abe03983644, capnp.Struct(s))
	return str
}

func (s TrieRootOrValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrieRootOrValue) DecodeFromPtr(p capnp.Ptr) TrieRootOrValue {
	return TrieRootOrValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrieRootOrValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrieRootOrValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRootOrValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRootOrValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRootOrValue) Value() TrieRootOrValue_value { return TrieRootOrValue_value(s) }

func (s TrieRootOrValue_value) Which() TrieRootOrValue_value_Which {
	return TrieRootOrValue_value_Which(capnp.Struct(s).Uint16(0))
}
func (s TrieRootOrValue_value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrieRootOrValue_value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrieRootOrValue_value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrieRootOrValue_value) TrieRoot() (TrieRoot, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != trieRoot")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return TrieRoot(p.Struct()), err
}

func (s TrieRootOrValue_value) HasTrieRoot() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRootOrValue_value) SetTrieRoot(v TrieRoot) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTrieRoot sets the trieRoot field to a newly
// allocated TrieRoot struct, preferring placement in s's segment.
func (s TrieRootOrValue_value) NewTrieRoot() (TrieRoot, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewTrieRoot(capnp.Struct(s).Segment())
	if err != nil {
		return TrieRoot{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TrieRootOrValue_value) Value() (Value, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != value")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Value(p.Struct()), err
}

func (s TrieRootOrValue_value) HasValue() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s TrieRootOrValue_value) SetValue(v Value) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s TrieRootOrValue_value) NewValue() (Value, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewValue(capnp.Struct(s).Segment())
	if err != nil {
		return Value{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TrieRootOrValue_List is a list of TrieRootOrValue.
type TrieRootOrValue_List = capnp.StructList[TrieRootOrValue]

// NewTrieRootOrValue creates a new list of TrieRootOrValue.
func NewTrieRootOrValue_List(s *capnp.Segment, sz int32) (TrieRootOrValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[TrieRootOrValue](l), err
}

// TrieRootOrValue_Future is a wrapper for a TrieRootOrValue promised by a client call.
type TrieRootOrValue_Future struct{ *capnp.Future }

func (f TrieRootOrValue_Future) Struct() (TrieRootOrValue, error) {
	p, err := f.Future.Ptr()
	return TrieRootOrValue(p.Struct()), err
}
func (p TrieRootOrValue_Future) Value() TrieRootOrValue_value_Future {
	return TrieRootOrValue_value_Future{p.Future}
}

// TrieRootOrValue_value_Future is a wrapper for a TrieRootOrValue_value promised by a client call.
type TrieRootOrValue_value_Future struct{ *capnp.Future }

func (f TrieRootOrValue_value_Future) Struct() (TrieRootOrValue_value, error) {
	p, err := f.Future.Ptr()
	return TrieRootOrValue_value(p.Struct()), err
}
func (p TrieRootOrValue_value_Future) TrieRoot() TrieRoot_Future {
	return TrieRoot_Future{Future: p.Future.Field(0, nil)}
}
func (p TrieRootOrValue_value_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(0, nil)}
}

const schema_a21abfe7a0a832e0 = "x\xda\x8cTOh#U\x1c\xfe}\xefM6Ym" +
	"l\x86)*\xaekqQq\x17[\x9a\xb8\xeanA" +
	"\xb6\x7f\xb5\x91\xd6\xe6\xb5M\xf1\xe0%M^\xda\xb4\xd3" +
	"\x99\x98NjQ1\xe0\xc1C\xd1\x9b\x87V\x10\xb4P" +
	"PD\x8a\xf5\xe6\xc1b=y\xd0\x8b\xe0\xa1\xa7\xe2\xa5" +
	"\x07A\x8b\x1eD\xc4\x8c\xbc\x99Lf\xcc\xe6\xd0\x9c\x1e" +
	"\xbf|\xbf\xf7}\xf3}\xbf\xdf\x1b:\xc3\x88\x96N6" +
	"4b\xe2f\xec\x92;\xf1\xec\x0e\xfff\xf5\xf3\x1d\x12" +
	"\xf7\x02\xeei\xe6\xd3\x8f\xcf\x8e\x1e\xda\xa3\x18\xe2D\xc6" +
	"\xe3\xec\xc4H3u\x1a`w\x08\xee\xdf?\xe5\xbf\x1e" +
	"\xff\xf3\x8f\x1d\x12)\xe0\xf7\xaf\xde\x7f\xe4t=\xf6\x8f" +
	"\x0fM\xb3C\xe3\xb6\x07}\xc6\x83\xbe\xfd\xc1\xb7\xdbo" +
	"\xcd\x9a\xbb]\xef\xbd\xcd\x8e\x8dQ\x0f\xfc<{\x9d\xe0" +
	"\x1e\xbf\xdbx\xf4\xc7\xe6\xd4\x87]\xc1\x1f\xb1mc\xdf" +
	"\x03\x7f\xe2\x81\xf1\xe0\xd1\xf9\xee\x0b\xdf\x1f\x92\xb8\x1f\x11" +
	"Iy\xc4\xc1\x89\x0c\xf0_\x08F\x8c\x1f\x10\xdc\x17\x1b" +
	"\xf9\xefN\x1e.\xff\xf6?\xbdy\xee\x03\xf7\xf9!\xc1" +
	"\xd8\xf7\x80\xef\xfd\xda\xbc\xf2\xc3sO\x9c\x93\xb8\x02\x84" +
	"\x9e\xa8;\x19\xd1\xd3\xa3\xda= \x18YM\xf1\xdfz" +
	"\xf3<\xb1\xf2\xf3\xd4_J,\xeb\x14\xfb\x99\xb6g|" +
	"\xa9\xa9\xd3\x17\xda\x01\xb59;\xbe\x8b+\xc0d\xec\x1d" +
	"#\x1b{\x80\xc8\x10\xb1\x03\x1ap-\xbb$\x07\x8b\x85" +
	"*\xb3\xaa\xc3\x0b\xb5\x8a\x9c\xb3mg\xb6\xb6X0y" +
	"]\xe6\x00\xa1q\x8d\x08\x11\xadz2C\xac\x7f\xb3`" +
	"\xd6e\xbb\x19Vu\xf8eu\xee\x1f_\xa9\x98\xa5h" +
	"_\xdb\xb7n}\x8atQU\xe6\xe5\xf2\xba\xb4\x1cR" +
	"\x9d\x09\xd5\xa9\x81H\xbf~\x83H<\xc6!\x86\x18\x80" +
	">\xa8\xda\xc0\x1c\x91x\x8aC\xdcb\xe8-\x15\x9c\x02" +
	"\x92\xc4\x90$\xb8\x96\xdcr\xc6L\xbbHXC\x82\x18" +
	"\x12\xaa\x16\x11\xe8\x11\xd1E(V#\x14\x1b\x957$" +
	".\x13\xc3e\x82[\xae\xd46\x9cy\xb9L\xbdJ-" +
	"R\xe1\xbc\x11\x90\x8a\xf0\xb1\xc0\x10\xcf\x8f\xc1\xcdB\xdc" +
	"\xacK\xd1\xc3\xb5\x1e\xd7\xf5x'\xaf\x11\x89\x11\x0e1" +
	"\xcd\x90D\xd3\xf5\x99\xb3/\x11\x89)\x0e\xb1\xc0p\x95" +
	"\xfd\xeb\xa2O\x0d\x82.T9\xc7!^e\x88[\x15" +
	"\x93.\xb9r}I\x96J\xb2DDH\x05y\xb7D" +
	",\x99vqmN\x96\xd5\x7f\xdd\x8c\xf0\x93\xf2\x92h" +
	"I\xf2\xd9\xa3\x9a\xae\xa2\x19\xb0g\xc7\x88\xc4\x04\x87\xc8" +
	"\xb5Eq\"}F\x89\x9a\xe6\x10\xaf\x04\xa2\x1aE\xdb" +
	"r|_\xda\xb3|\x01I\xbcs\xf2\xearp\xd3\xcf" +
	"J\x05\x158v]\xf1=\xc9!nF\x1dKg\xc2" +
	"\xac\\\xa7u\x8bgJ\xb81\xbe\x06\xff\x83\x91\x0a\xd7" +
	"\xbe#3\x04:\xe2\xb6\xed\xa8)\xe9iO\xc9d&" +
	"tF\x0f\xc6${-\xf4\x05\xcc\xf7j\xe6F\x18`" +
	"\x7f\xd1\xae[N0;\xf1\x0d\xf9Zp\xeeU\x94w" +
	"\xc5\xd6\x19\x11\x09-\xfa\xd2\xe8\xc8\xf8\xdb\x15\xd55\x1c" +
	"\xeaR\xbf\xf0\xe9\xd1\xb3\x19b:c}\xd0\x94K\xca" +
	"\xbb!\x1fw\xa7Z\x93\xe5\xcaV\xb06\xad\x8d,\xaa" +
	"\x9bk\xd2R\xd6\xddG\xc8q \x15r\x13T\xf1\xbf" +
	"\x00\x00\x00\xff\xff7\x9b\x81\xd2"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a21abfe7a0a832e0,
		Nodes: []uint64{
			0x98ab6abe03983644,
			0x98f2f343ba55d3f9,
			0x996c4f7c8ac1947e,
			0x9a48fece217f86c2,
			0xb2c94699f0bf1801,
			0xee661cdac3557f47,
			0xf02637cd1bfeeb8c,
			0xf748d66808f07b38,
			0xfb056d00e01e8db3,
		},
		Compressed: true,
	})
}
