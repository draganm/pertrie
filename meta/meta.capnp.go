// Code generated by capnpc-go. DO NOT EDIT.

package meta

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type FreeBlock capnp.Struct

// FreeBlock_TypeID is the unique identifier for the type FreeBlock.
const FreeBlock_TypeID = 0xceb2f36beef49188

func NewFreeBlock(s *capnp.Segment) (FreeBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FreeBlock(st), err
}

func NewRootFreeBlock(s *capnp.Segment) (FreeBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FreeBlock(st), err
}

func ReadRootFreeBlock(msg *capnp.Message) (FreeBlock, error) {
	root, err := msg.Root()
	return FreeBlock(root.Struct()), err
}

func (s FreeBlock) String() string {
	str, _ := text.Marshal(0xceb2f36beef49188, capnp.Struct(s))
	return str
}

func (s FreeBlock) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FreeBlock) DecodeFromPtr(p capnp.Ptr) FreeBlock {
	return FreeBlock(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FreeBlock) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FreeBlock) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FreeBlock) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FreeBlock) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FreeBlock) Next() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s FreeBlock) SetNext(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// FreeBlock_List is a list of FreeBlock.
type FreeBlock_List = capnp.StructList[FreeBlock]

// NewFreeBlock creates a new list of FreeBlock.
func NewFreeBlock_List(s *capnp.Segment, sz int32) (FreeBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[FreeBlock](l), err
}

// FreeBlock_Future is a wrapper for a FreeBlock promised by a client call.
type FreeBlock_Future struct{ *capnp.Future }

func (f FreeBlock_Future) Struct() (FreeBlock, error) {
	p, err := f.Future.Ptr()
	return FreeBlock(p.Struct()), err
}

type Database capnp.Struct

// Database_TypeID is the unique identifier for the type Database.
const Database_TypeID = 0x9a43255dccfbe401

func NewDatabase(s *capnp.Segment) (Database, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Database(st), err
}

func NewRootDatabase(s *capnp.Segment) (Database, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Database(st), err
}

func ReadRootDatabase(msg *capnp.Message) (Database, error) {
	root, err := msg.Root()
	return Database(root.Struct()), err
}

func (s Database) String() string {
	str, _ := text.Marshal(0x9a43255dccfbe401, capnp.Struct(s))
	return str
}

func (s Database) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Database) DecodeFromPtr(p capnp.Ptr) Database {
	return Database(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Database) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Database) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Database) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Database) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Database) Version() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Database) SetVersion(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Database) FirstFreeBlock() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s Database) SetFirstFreeBlock(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s Database) NextUnallocatedBlock() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s Database) SetNextUnallocatedBlock(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

// Database_List is a list of Database.
type Database_List = capnp.StructList[Database]

// NewDatabase creates a new list of Database.
func NewDatabase_List(s *capnp.Segment, sz int32) (Database_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Database](l), err
}

// Database_Future is a wrapper for a Database promised by a client call.
type Database_Future struct{ *capnp.Future }

func (f Database_Future) Struct() (Database, error) {
	p, err := f.Future.Ptr()
	return Database(p.Struct()), err
}

const schema_c7a6b8fe322e2a04 = "x\xdaT\x8e1K\x03A\x10\x85\xdf\xdb[M@C" +
	"\\\x12\xd0?`\x130\xa0\xa5MB\xd4\xa0`\xe1@" +
	",\x05\xd7\xb8BH\xbc\x0bw\x87\x88\x8d\xadmJ\x05" +
	"\x0b-,\xd2\x08V\xfe\x03\x1b\xf1WX\x0b\xa2\x16\"" +
	"x\xb2\x88\xc1T3\xcc\xf7\xe6\xf1\xcd\x0c\xeaz\xb10" +
	"\xab\xa0dnb2\xe3\xf3\xd7\xe3\xce\xfc\xca\x05d\x8a" +
	"*\xd3\x95\xea\xd2\xf7\xfd\xcd\x03t\x0e0\xaf\xd7\xe6\xd3" +
	"\xcf\x8f[0;\x1b\xbc\xbft\xdf\xee\x9e|\x90\xe3\xc1" +
	"\xd29\x87\xa5+\xfa\xed\x925,d\x87.\xb5\xd5\xb6" +
	"\xed3\xec/\xaf\xda\xd4\xee\xe5l\xe2\xb6H\x99\x0e4" +
	"\xa0\x09\x98\xb5\x06 \xf5\x80\xb2\xa9h\xc82\xfdq\xe3" +
	"\x04\x90\xf5\x80\xd2R4J\x95\xa9\x00#C@Z\x01" +
	"eW\xf1\xf4\xc8\xc5I'\x0a\x99\x87b\x1e\xcc\x0e:" +
	"q\x926c\x87\x9ak\xf4\xa2vw\x04Bw\x9cn" +
	"\x87\xb6\xc7^\xd4\xb6\xa9\xdbo\x14\xc7\xf0\x7f\xc3f\xec" +
	"\xdc/\xf6\x8az\xa4X\xa8\x00\x92\x0f(e\xc5\xa2\xef" +
	"\xfb\xfb\xfe\x09\x00\x00\xff\xff\x1cNN\xfb"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c7a6b8fe322e2a04,
		Nodes: []uint64{
			0x9a43255dccfbe401,
			0xceb2f36beef49188,
		},
		Compressed: true,
	})
}
